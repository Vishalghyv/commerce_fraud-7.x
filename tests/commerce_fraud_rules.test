<?php

/**
 * @file
 * Unit tests for Commerce Fraud rules.
 */

/**
 * Test fraud rules.
 */
class CommerceFraudRulesTest extends CommerceBaseTestCase {

  /**
   * Order.
   *
   * @var order
   */
  public $order;

  /**
   * Product.
   *
   * @var product
   */
  public $product;

  /**
   * Rules.
   *
   * @var rules
   */
  public $rules;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Fraud Rules',
      'description' => 'Test the rules provided by the Commerce Fraud module.',
      'group' => 'Commerce Fraud',
    );
  }

  /**
   * Setup the testing.
   */
  protected function setUp() {
    $modules = $this->setUpHelper('all', array('commerce_fraud'));
    parent::setUp($modules);

    // User creation for different operations.
    $this->store_customer = $this->createStoreCustomer();

    // The rule that sends a mail after checkout completion should be disabled
    // as it returns an error caused by how mail messages are stored.
    $rules_config = rules_config_load('commerce_checkout_order_email');
    $rules_config->active = FALSE;
    $rules_config->save();

    variable_set('site_default_country', 'US');

    // Create order.
    $this->createDummyProductDisplayContentType();
    $this->product = $this->createDummyProduct('PROD-04', 'Product Four', 100, 'USD');
    $this->order = $this->createDummyOrder(2, array($this->product->product_id => 3), 'pending');

    // Rules.
    $this->rules = commerce_fraud_default_rules_configuration();
  }

  /**
   * Overrides CommerceBaseTestCase::permissionBuilder().
   */
  protected function permissionBuilder($set) {
    $permissions = parent::permissionBuilder($set);

    switch ($set) {
      case 'store admin':
        $permissions[] = 'administer frauds';
        break;
    }

    return $permissions;
  }

  /**
   * Tests Anonymous Rule in commerce fraud.
   */
  public function testCommerceFraudAnonymousRule() {
    $this->drupalLogin($this->store_customer);
    $this->rules['commerce_fraud_anonymous_user']->active = TRUE;
    $this->rules['commerce_fraud_anonymous_user']->save();

    global $user;
    $user = user_load(0);

    // To test the Anonymous Rule.
    $this->order->uid = $user->uid;

    commerce_checkout_complete($this->order);

    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Order placed by anonymous user: 5'));
  }

  /**
   * Tests Quantity Rule in commerce fraud.
   */
  public function testCommerceFraudQuantityRule() {
    $this->drupalLogin($this->store_customer);
    $this->order = $this->createDummyOrder(3, array($this->product->product_id => 11), 'pending');
    $this->rules['commerce_fraud_item_quantity']->active = TRUE;
    $this->rules['commerce_fraud_item_quantity']->save();

    commerce_checkout_complete($this->order);

    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Order has more than 10 products: 5'));
  }

  /**
   * Tests Last Order Rule in commerce fraud.
   */
  public function testCommerceFraudLastOrderRule() {
    $this->drupalLogin($this->store_customer);
    $old_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'completed');
    $this->rules['commerce_fraud_last_order']->active = TRUE;
    $this->rules['commerce_fraud_last_order']->save();

    $date = new DateTimeImmutable();
    $date = $date->modify('- 3 minutes');
    $old_order->created = $date->getTimestamp();

    $new_user = user_load(1);

    $this->order->uid = $new_user->uid;
    $old_order->uid = $new_user->uid;

    commerce_order_save($old_order);
    commerce_checkout_complete($this->order);

    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Previous order completed within 5 minutes: 5'));
  }

}
