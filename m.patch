diff --git a/LICENSE.txt b/LICENSE.txt
deleted file mode 100644
index d159169..0000000
--- a/LICENSE.txt
+++ /dev/null
@@ -1,339 +0,0 @@
-                    GNU GENERAL PUBLIC LICENSE
-                       Version 2, June 1991
-
- Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
- 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
- Everyone is permitted to copy and distribute verbatim copies
- of this license document, but changing it is not allowed.
-
-                            Preamble
-
-  The licenses for most software are designed to take away your
-freedom to share and change it.  By contrast, the GNU General Public
-License is intended to guarantee your freedom to share and change free
-software--to make sure the software is free for all its users.  This
-General Public License applies to most of the Free Software
-Foundation's software and to any other program whose authors commit to
-using it.  (Some other Free Software Foundation software is covered by
-the GNU Lesser General Public License instead.)  You can apply it to
-your programs, too.
-
-  When we speak of free software, we are referring to freedom, not
-price.  Our General Public Licenses are designed to make sure that you
-have the freedom to distribute copies of free software (and charge for
-this service if you wish), that you receive source code or can get it
-if you want it, that you can change the software or use pieces of it
-in new free programs; and that you know you can do these things.
-
-  To protect your rights, we need to make restrictions that forbid
-anyone to deny you these rights or to ask you to surrender the rights.
-These restrictions translate to certain responsibilities for you if you
-distribute copies of the software, or if you modify it.
-
-  For example, if you distribute copies of such a program, whether
-gratis or for a fee, you must give the recipients all the rights that
-you have.  You must make sure that they, too, receive or can get the
-source code.  And you must show them these terms so they know their
-rights.
-
-  We protect your rights with two steps: (1) copyright the software, and
-(2) offer you this license which gives you legal permission to copy,
-distribute and/or modify the software.
-
-  Also, for each author's protection and ours, we want to make certain
-that everyone understands that there is no warranty for this free
-software.  If the software is modified by someone else and passed on, we
-want its recipients to know that what they have is not the original, so
-that any problems introduced by others will not reflect on the original
-authors' reputations.
-
-  Finally, any free program is threatened constantly by software
-patents.  We wish to avoid the danger that redistributors of a free
-program will individually obtain patent licenses, in effect making the
-program proprietary.  To prevent this, we have made it clear that any
-patent must be licensed for everyone's free use or not licensed at all.
-
-  The precise terms and conditions for copying, distribution and
-modification follow.
-
-                    GNU GENERAL PUBLIC LICENSE
-   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
-
-  0. This License applies to any program or other work which contains
-a notice placed by the copyright holder saying it may be distributed
-under the terms of this General Public License.  The "Program", below,
-refers to any such program or work, and a "work based on the Program"
-means either the Program or any derivative work under copyright law:
-that is to say, a work containing the Program or a portion of it,
-either verbatim or with modifications and/or translated into another
-language.  (Hereinafter, translation is included without limitation in
-the term "modification".)  Each licensee is addressed as "you".
-
-Activities other than copying, distribution and modification are not
-covered by this License; they are outside its scope.  The act of
-running the Program is not restricted, and the output from the Program
-is covered only if its contents constitute a work based on the
-Program (independent of having been made by running the Program).
-Whether that is true depends on what the Program does.
-
-  1. You may copy and distribute verbatim copies of the Program's
-source code as you receive it, in any medium, provided that you
-conspicuously and appropriately publish on each copy an appropriate
-copyright notice and disclaimer of warranty; keep intact all the
-notices that refer to this License and to the absence of any warranty;
-and give any other recipients of the Program a copy of this License
-along with the Program.
-
-You may charge a fee for the physical act of transferring a copy, and
-you may at your option offer warranty protection in exchange for a fee.
-
-  2. You may modify your copy or copies of the Program or any portion
-of it, thus forming a work based on the Program, and copy and
-distribute such modifications or work under the terms of Section 1
-above, provided that you also meet all of these conditions:
-
-    a) You must cause the modified files to carry prominent notices
-    stating that you changed the files and the date of any change.
-
-    b) You must cause any work that you distribute or publish, that in
-    whole or in part contains or is derived from the Program or any
-    part thereof, to be licensed as a whole at no charge to all third
-    parties under the terms of this License.
-
-    c) If the modified program normally reads commands interactively
-    when run, you must cause it, when started running for such
-    interactive use in the most ordinary way, to print or display an
-    announcement including an appropriate copyright notice and a
-    notice that there is no warranty (or else, saying that you provide
-    a warranty) and that users may redistribute the program under
-    these conditions, and telling the user how to view a copy of this
-    License.  (Exception: if the Program itself is interactive but
-    does not normally print such an announcement, your work based on
-    the Program is not required to print an announcement.)
-
-These requirements apply to the modified work as a whole.  If
-identifiable sections of that work are not derived from the Program,
-and can be reasonably considered independent and separate works in
-themselves, then this License, and its terms, do not apply to those
-sections when you distribute them as separate works.  But when you
-distribute the same sections as part of a whole which is a work based
-on the Program, the distribution of the whole must be on the terms of
-this License, whose permissions for other licensees extend to the
-entire whole, and thus to each and every part regardless of who wrote it.
-
-Thus, it is not the intent of this section to claim rights or contest
-your rights to work written entirely by you; rather, the intent is to
-exercise the right to control the distribution of derivative or
-collective works based on the Program.
-
-In addition, mere aggregation of another work not based on the Program
-with the Program (or with a work based on the Program) on a volume of
-a storage or distribution medium does not bring the other work under
-the scope of this License.
-
-  3. You may copy and distribute the Program (or a work based on it,
-under Section 2) in object code or executable form under the terms of
-Sections 1 and 2 above provided that you also do one of the following:
-
-    a) Accompany it with the complete corresponding machine-readable
-    source code, which must be distributed under the terms of Sections
-    1 and 2 above on a medium customarily used for software interchange; or,
-
-    b) Accompany it with a written offer, valid for at least three
-    years, to give any third party, for a charge no more than your
-    cost of physically performing source distribution, a complete
-    machine-readable copy of the corresponding source code, to be
-    distributed under the terms of Sections 1 and 2 above on a medium
-    customarily used for software interchange; or,
-
-    c) Accompany it with the information you received as to the offer
-    to distribute corresponding source code.  (This alternative is
-    allowed only for noncommercial distribution and only if you
-    received the program in object code or executable form with such
-    an offer, in accord with Subsection b above.)
-
-The source code for a work means the preferred form of the work for
-making modifications to it.  For an executable work, complete source
-code means all the source code for all modules it contains, plus any
-associated interface definition files, plus the scripts used to
-control compilation and installation of the executable.  However, as a
-special exception, the source code distributed need not include
-anything that is normally distributed (in either source or binary
-form) with the major components (compiler, kernel, and so on) of the
-operating system on which the executable runs, unless that component
-itself accompanies the executable.
-
-If distribution of executable or object code is made by offering
-access to copy from a designated place, then offering equivalent
-access to copy the source code from the same place counts as
-distribution of the source code, even though third parties are not
-compelled to copy the source along with the object code.
-
-  4. You may not copy, modify, sublicense, or distribute the Program
-except as expressly provided under this License.  Any attempt
-otherwise to copy, modify, sublicense or distribute the Program is
-void, and will automatically terminate your rights under this License.
-However, parties who have received copies, or rights, from you under
-this License will not have their licenses terminated so long as such
-parties remain in full compliance.
-
-  5. You are not required to accept this License, since you have not
-signed it.  However, nothing else grants you permission to modify or
-distribute the Program or its derivative works.  These actions are
-prohibited by law if you do not accept this License.  Therefore, by
-modifying or distributing the Program (or any work based on the
-Program), you indicate your acceptance of this License to do so, and
-all its terms and conditions for copying, distributing or modifying
-the Program or works based on it.
-
-  6. Each time you redistribute the Program (or any work based on the
-Program), the recipient automatically receives a license from the
-original licensor to copy, distribute or modify the Program subject to
-these terms and conditions.  You may not impose any further
-restrictions on the recipients' exercise of the rights granted herein.
-You are not responsible for enforcing compliance by third parties to
-this License.
-
-  7. If, as a consequence of a court judgment or allegation of patent
-infringement or for any other reason (not limited to patent issues),
-conditions are imposed on you (whether by court order, agreement or
-otherwise) that contradict the conditions of this License, they do not
-excuse you from the conditions of this License.  If you cannot
-distribute so as to satisfy simultaneously your obligations under this
-License and any other pertinent obligations, then as a consequence you
-may not distribute the Program at all.  For example, if a patent
-license would not permit royalty-free redistribution of the Program by
-all those who receive copies directly or indirectly through you, then
-the only way you could satisfy both it and this License would be to
-refrain entirely from distribution of the Program.
-
-If any portion of this section is held invalid or unenforceable under
-any particular circumstance, the balance of the section is intended to
-apply and the section as a whole is intended to apply in other
-circumstances.
-
-It is not the purpose of this section to induce you to infringe any
-patents or other property right claims or to contest validity of any
-such claims; this section has the sole purpose of protecting the
-integrity of the free software distribution system, which is
-implemented by public license practices.  Many people have made
-generous contributions to the wide range of software distributed
-through that system in reliance on consistent application of that
-system; it is up to the author/donor to decide if he or she is willing
-to distribute software through any other system and a licensee cannot
-impose that choice.
-
-This section is intended to make thoroughly clear what is believed to
-be a consequence of the rest of this License.
-
-  8. If the distribution and/or use of the Program is restricted in
-certain countries either by patents or by copyrighted interfaces, the
-original copyright holder who places the Program under this License
-may add an explicit geographical distribution limitation excluding
-those countries, so that distribution is permitted only in or among
-countries not thus excluded.  In such case, this License incorporates
-the limitation as if written in the body of this License.
-
-  9. The Free Software Foundation may publish revised and/or new versions
-of the General Public License from time to time.  Such new versions will
-be similar in spirit to the present version, but may differ in detail to
-address new problems or concerns.
-
-Each version is given a distinguishing version number.  If the Program
-specifies a version number of this License which applies to it and "any
-later version", you have the option of following the terms and conditions
-either of that version or of any later version published by the Free
-Software Foundation.  If the Program does not specify a version number of
-this License, you may choose any version ever published by the Free Software
-Foundation.
-
-  10. If you wish to incorporate parts of the Program into other free
-programs whose distribution conditions are different, write to the author
-to ask for permission.  For software which is copyrighted by the Free
-Software Foundation, write to the Free Software Foundation; we sometimes
-make exceptions for this.  Our decision will be guided by the two goals
-of preserving the free status of all derivatives of our free software and
-of promoting the sharing and reuse of software generally.
-
-                            NO WARRANTY
-
-  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
-FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
-OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
-PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
-OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
-TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
-REPAIR OR CORRECTION.
-
-  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
-OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
-TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
-YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
-PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGES.
-
-                     END OF TERMS AND CONDITIONS
-
-            How to Apply These Terms to Your New Programs
-
-  If you develop a new program, and you want it to be of the greatest
-possible use to the public, the best way to achieve this is to make it
-free software which everyone can redistribute and change under these terms.
-
-  To do so, attach the following notices to the program.  It is safest
-to attach them to the start of each source file to most effectively
-convey the exclusion of warranty; and each file should have at least
-the "copyright" line and a pointer to where the full notice is found.
-
-    <one line to give the program's name and a brief idea of what it does.>
-    Copyright (C) <year>  <name of author>
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License along
-    with this program; if not, write to the Free Software Foundation, Inc.,
-    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-
-Also add information on how to contact you by electronic and paper mail.
-
-If the program is interactive, make it output a short notice like this
-when it starts in an interactive mode:
-
-    Gnomovision version 69, Copyright (C) year name of author
-    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
-    This is free software, and you are welcome to redistribute it
-    under certain conditions; type `show c' for details.
-
-The hypothetical commands `show w' and `show c' should show the appropriate
-parts of the General Public License.  Of course, the commands you use may
-be called something other than `show w' and `show c'; they could even be
-mouse-clicks or menu items--whatever suits your program.
-
-You should also get your employer (if you work as a programmer) or your
-school, if any, to sign a "copyright disclaimer" for the program, if
-necessary.  Here is a sample; alter the names:
-
-  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
-  `Gnomovision' (which makes passes at compilers) written by James Hacker.
-
-  <signature of Ty Coon>, 1 April 1989
-  Ty Coon, President of Vice
-
-This General Public License does not permit incorporating your program into
-proprietary programs.  If your program is a subroutine library, you may
-consider it more useful to permit linking proprietary applications with the
-library.  If this is what you want to do, use the GNU Lesser General
-Public License instead of this License.
diff --git a/commerce_fraud.api.php b/commerce_fraud.api.php
deleted file mode 100644
index c662d27..0000000
--- a/commerce_fraud.api.php
+++ /dev/null
@@ -1,6 +0,0 @@
-<?php
-
-/**
- * @file
- * Hooks provided by the Commerce Fraud module.
- */
diff --git a/commerce_fraud.info b/commerce_fraud.info
index 793a345..d3357c5 100644
--- a/commerce_fraud.info
+++ b/commerce_fraud.info
@@ -6,20 +6,13 @@ package = Commerce (contrib)
 dependencies[] = commerce
 dependencies[] = commerce_order
 dependencies[] = rules
-dependencies[] = entity
-dependencies[] = entityreference
 dependencies[] = views
 
 configure = admin/commerce/config/fraud
 
 files[] = includes/views/views_handler_commerce_fraud_level.inc
 files[] = includes/views/views_handler_commerce_fraud_points.inc
-;Simple tests
+
+;Simple Tests
 files[] = tests/commerce_fraud.test
-files[] = tests/commerce_fraud_ui.test
-test_dependencies[] = addressfield
-; Information added by Drupal.org packaging script on 2017-02-07
-version = "7.x-1.0-beta2"
-core = "7.x"
-project = "commerce_fraud"
-datestamp = "1486489090"
+files[] = tests/commerce_fraud_rules.test
diff --git a/commerce_fraud.install b/commerce_fraud.install
index f6ac731..353aaf9 100644
--- a/commerce_fraud.install
+++ b/commerce_fraud.install
@@ -34,10 +34,8 @@ function commerce_fraud_schema() {
  * Implements hook_uninstall().
  */
 function commerce_fraud_uninstall() {
-  variable_del('commerce_fraud_store_threshold');
-  variable_del('commerce_fraud_store_po_box_penalty');
-  variable_del('commerce_fraud_whitelist_upper_cap');
-  variable_del('commerce_fraud_blacklist_lower_cap');
+  variable_del('commerce_fraud_greylist_cap');
+  variable_del('commerce_fraud_blacklist_cap');
 }
 
 /**
diff --git a/commerce_fraud.module b/commerce_fraud.module
index a8fd3cd..60ad3e8 100644
--- a/commerce_fraud.module
+++ b/commerce_fraud.module
@@ -56,6 +56,11 @@ function commerce_fraud_permission() {
       'description' => t('Allows users to configure the Commerce Fraud settings.'),
       'restrict access' => TRUE,
     ),
+    'view order fraud notes' => array(
+      'title' => t('View order fraud notes'),
+      'description' => t('Allows users to view fraud notes for orders they have access to.'),
+      'restrict access' => TRUE,
+    ),
   );
 }
 
@@ -84,6 +89,10 @@ function commerce_fraud_views_api() {
  */
 function commerce_fraud_entity_view_alter(&$build, $type) {
   if ($type == 'commerce_order') {
+    if (!user_access('view order fraud notes')) {
+      return;
+    }
+
     $breakdown = array(
       '#prefix' => '<div class="field"><div class="field-label">' . t('Fraud Information: ') . '</div><div class="field-items">',
       '#suffix' => '</div></div>',
@@ -114,31 +123,15 @@ function commerce_fraud_theme_registry_alter(&$theme_registry) {
  * @return bool
  */
 function commerce_fraud_last_order($order, $minutes, $order_statuses = array('completed')) {
-
-  debug(commerce_fraud_timestamp_from_minutes($minutes));
   $query = db_select('commerce_order', 'o')
     ->fields('o', array('order_id'))
     ->condition('uid', $order->uid)
     ->condition('status', $order_statuses, 'IN')
     ->condition('created', commerce_fraud_timestamp_from_minutes($minutes), '>=');
-  debug($query);
 
   return !empty($query->execute()->fetchAssoc());
 }
 
-/**
- *
- */
-function commerce_fraud_blacklist_send_email($order) {
-  if (commerce_fraud_is_blacklisted($order)) {
-    $from = 'test@gmail.com';
-    $to = 'test@gmail.com';
-    $subject = 'Blacklisted Order';
-    $body = commerce_fraud_get_fraud_notes_for_order($order->order_id);
-    simple_mail_queue($from, $to, $subject, $body);
-  }
-}
-
 /**
  * Returns a timestamp matching x days before today.
  *
@@ -283,42 +276,35 @@ function commerce_fraud_is_blacklisted($order) {
 }
 
 /**
+ * Checks the street address for a PO Box.
  *
+ * @param $order
+ *
+ * @return bool
  */
-function commerce_fraud_order_anonymous($order) {
-  if ($order->uid == 0) {
-    return TRUE;
-  }
-  elseif (!$order->uid) {
-    return TRUE;
-  }
-  else {
+function commerce_fraud_order_has_pobox($order) {
+  if (!isset($order->commerce_customer_shipping)) {
     return FALSE;
   }
+  $profile = commerce_customer_profile_load($order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id']);
+
+  $thoroughfare = $profile->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] ?? '';
 
+  $premise = $profile->commerce_customer_address[LANGUAGE_NONE][0]['premise'] ?? '';
+
+  return commerce_fraud_contains_po_box($thoroughfare) || commerce_fraud_contains_po_box($premise);
 }
 
 /**
- * Checks the street address for a PO Box.
+ * Checks the string for PO Box.
  *
- * @param $order
+ * @param address
  *
  * @return bool
  */
-function commerce_fraud_order_has_pobox($order) {
+function commerce_fraud_contains_po_box($address) {
 
-  $wrapper = entity_metadata_wrapper('commerce_order', $order);
-  $shipping_address = $wrapper->commerce_customer_shipping->commerce_customer_address->value();
-  $address1 = $shipping_address['thoroughfare'];
-  debug($address1);
-  $address2 = $shipping_address['premise'];
-  debug($address2);
-  if (preg_match("/^\s*((?:P(?:OST)?.?\s*(?:O(?:FF(?:ICE)?)?)?.?\s*(?:B(?:IN|OX)?)+)+|(?:B(?:IN|OX)+\s+)+)\s*\d+/i", $address1)) {
-    return TRUE;
-  }
-  else {
-    return preg_match("/^\s*((?:P(?:OST)?.?\s*(?:O(?:FF(?:ICE)?)?)?.?\s*(?:B(?:IN|OX)?)+)+|(?:B(?:IN|OX)+\s+)+)\s*\d+/i", $address2);
-  }
+  return preg_match("/\s*((?:P(?:OST)?.?\s*(?:O(?:FF(?:ICE)?)?)?.?\s*(?:B(?:IN|OX)?)?)+|(?:B(?:IN|OX)+\s+)+)\s*\d+\s*(^|\s|$)/i", $address);
 }
 
 /**
@@ -333,3 +319,92 @@ function commerce_fraud_order_condition_fraud_level_operator_options() {
     'commerce_fraud_is_blacklisted' => 'Blacklisted',
   );
 }
+
+/**
+ * Checks If the order is placed by anonymous user.
+ *
+ * @param $order
+ *
+ * @return bool
+ */
+function commerce_fraud_order_is_anonymous($order) {
+  return !$order->uid;
+}
+
+/**
+ * Checks if order was made with a previously fraudulent email.
+ *
+ * @param $order
+ *
+ * @return bool
+ */
+function commerce_fraud_check_email($order) {
+  if (!isset($order->mail)) {
+    return FALSE;
+  }
+  $mail = $order->mail;
+  $query = db_select('commerce_order', 'o')
+    ->fields('o', array('order_id'))
+    ->condition('status', array('fraudulent'), 'IN')
+    ->condition('mail', $mail, '=');
+  return !empty($query->execute()->fetchAssoc());
+}
+
+/**
+ * Checks if order was made with a previously fraudulent user id.
+ *
+ * @param $order
+ *
+ * @return bool
+ */
+function commerce_fraud_check_uid($order) {
+  if (!isset($order->uid)) {
+    return FALSE;
+  }
+  $uid = $order->uid;
+  $query = db_select('commerce_order', 'o')
+    ->fields('o', array('order_id'))
+    ->condition('status', array('fraudulent'), 'IN')
+    ->condition('uid', $uid, '=');
+  return !empty($query->execute()->fetchAssoc());
+}
+
+/**
+ * Checks if order was made with a previously fraudulent hostname.
+ *
+ * @param $order
+ *
+ * @return bool
+ */
+function commerce_fraud_check_hostname($order) {
+  if (!isset($order->hostname)) {
+    return FALSE;
+  }
+  $hostname = $order->hostname;
+  $query = db_select('commerce_order', 'o')
+    ->fields('o', array('order_id'))
+    ->condition('status', array('fraudulent'), 'IN')
+    ->condition('hostname', $hostname, '=');
+  return !empty($query->execute()->fetchAssoc());
+}
+
+/**
+ * Checks if User have placed orders with different IP.
+ *
+ * @param $order
+ *
+ * @return bool
+ */
+function commerce_fraud_check_user_ip($order) {
+
+  $orders_count = db_select('commerce_order', 'o')
+    ->fields('o', array('hostname'))
+    ->condition('uid', $order->uid)
+    ->condition('hostname', array($order->hostname), 'NOT IN')
+    ->distinct()
+    ->countQuery()
+    ->execute()
+    ->fetchField();
+
+  return (bool) $orders_count;
+}
diff --git a/commerce_fraud.rules.inc b/commerce_fraud.rules.inc
index 7a43b8d..035ccf0 100644
--- a/commerce_fraud.rules.inc
+++ b/commerce_fraud.rules.inc
@@ -49,19 +49,6 @@ function commerce_fraud_rules_condition_info() {
       'execute' => 'commerce_fraud_rules_compare_fraud_level',
     ),
   );
-  $conditions['commerce_fraud_blacklisted'] = array(
-    'label' => t('Order is black listed'),
-    'group' => t('Commerce Fraud'),
-    'parameter' => array(
-      'commerce_order' => array(
-        'label' => t('The commerce order'),
-        'type' => 'commerce_order',
-      ),
-    ),
-    'callbacks' => array(
-      'execute' => 'commerce_fraud_rules_is_blacklisted',
-    ),
-  );
 
   $conditions['commerce_fraud_has_po_box'] = array(
     'label' => t('Order shipping address has po box'),
@@ -114,9 +101,18 @@ function commerce_fraud_rules_condition_info() {
         'label' => t('The current commerce order'),
         'type' => 'commerce_order',
       ),
+      'minutes' => array(
+        'label' => t('Number of minutes'),
+        'type' => 'integer',
+      ),
+      'order_status' => array(
+        'label' => t('Order statuses to compare'),
+        'type' => 'text',
+        'options list' => 'commerce_order_status_options_list',
+      ),
     ),
     'callbacks' => array(
-      'execute' => 'commerce_fraud_rules_last_order',
+      'execute' => 'commerce_fraud_last_order',
     ),
   );
 
@@ -130,7 +126,63 @@ function commerce_fraud_rules_condition_info() {
       ),
     ),
     'callbacks' => array(
-      'execute' => 'commerce_fraud_order_anonymous',
+      'execute' => 'commerce_fraud_order_is_anonymous',
+    ),
+  );
+
+  $conditions['commerce_fraud_email'] = array(
+    'label' => t('Compares if order was made with a previously fraudulent email'),
+    'group' => t('Commerce Fraud'),
+    'parameter' => array(
+      'commerce_order' => array(
+        'label' => t('The current commerce order'),
+        'type' => 'commerce_order',
+      ),
+    ),
+    'callbacks' => array(
+      'execute' => 'commerce_fraud_check_email',
+    ),
+  );
+
+  $conditions['commerce_fraud_uid'] = array(
+    'label' => t('Compares if order was made with a previously fraudulent user id'),
+    'group' => t('Commerce Fraud'),
+    'parameter' => array(
+      'commerce_order' => array(
+        'label' => t('The current commerce order'),
+        'type' => 'commerce_order',
+      ),
+    ),
+    'callbacks' => array(
+      'execute' => 'commerce_fraud_check_uid',
+    ),
+  );
+
+  $conditions['commerce_fraud_hostname'] = array(
+    'label' => t('Compares if order was made with a previously fraudulent hostname'),
+    'group' => t('Commerce Fraud'),
+    'parameter' => array(
+      'commerce_order' => array(
+        'label' => t('The current commerce order'),
+        'type' => 'commerce_order',
+      ),
+    ),
+    'callbacks' => array(
+      'execute' => 'commerce_fraud_check_hostname',
+    ),
+  );
+
+  $conditions['commerce_fraud_ip'] = array(
+    'label' => t('If user has placed orders from different IP addresses'),
+    'group' => t('Commerce Fraud'),
+    'parameter' => array(
+      'commerce_order' => array(
+        'label' => t('The current commerce order'),
+        'type' => 'commerce_order',
+      ),
+    ),
+    'callbacks' => array(
+      'execute' => 'commerce_fraud_check_user_ip',
     ),
   );
 
@@ -159,17 +211,6 @@ function commerce_fraud_rules_is_greylisted($order) {
   return commerce_fraud_is_greylisted($order);
 }
 
-/**
- * BlackList condition callback.
- *
- * @param $order
- *
- * @return bool
- */
-function commerce_fraud_blacklist_email($order) {
-  return commerce_fraud_blacklist_send_email($order);
-}
-
 /**
  * Blacklist condition callback.
  *
@@ -238,25 +279,8 @@ function commerce_fraud_rules_user_ip_in_country($countries) {
   return strpos($countries, $guessed_country) !== FALSE;
 }
 
-/**
- * Callback for last order condition.
- *
- * @param $order
- * @param $minutes
- * @param $order_statuses
- *
- * @return bool
- */
-function commerce_fraud_rules_last_order($order) {
-  $minutes = 5;
-  debug($order);
-  return commerce_fraud_last_order($order, $minutes);
-}
-
 /**
  * Implements hook_rules_action_info().
- *
- * @return array
  */
 function commerce_fraud_rules_action_info() {
   $actions = array();
@@ -273,7 +297,7 @@ function commerce_fraud_rules_action_info() {
         'type' => 'integer',
         'label' => t('The counter'),
         'description' => t('Defines by how much the fraud count is increased.'),
-        'default value' => 20,
+        'default value' => 1,
       ),
       'description' => array(
         'type' => 'text',
@@ -327,21 +351,6 @@ function commerce_fraud_rules_action_info() {
     ),
     'access callback' => 'commerce_order_rules_access',
   );
-  $actions['email'] = array(
-    'label' => t('Send fraud orders email'),
-    'group' => t('Commerce Fraud'),
-    'parameter' => array(
-      'commerce_order' => array(
-        'label' => t('The current commerce order'),
-        'type' => 'commerce_order',
-      ),
-    ),
-    'configurable' => FALSE,
-    'callbacks' => array(
-      'execute' => 'commerce_fraud_blacklist_email',
-    ),
-    'access callback' => 'commerce_order_rules_access',
-  );
 
   return $actions;
 }
diff --git a/commerce_fraud.rules_defaults.inc b/commerce_fraud.rules_defaults.inc
index ce03cf7..497d8bb 100644
--- a/commerce_fraud.rules_defaults.inc
+++ b/commerce_fraud.rules_defaults.inc
@@ -24,25 +24,9 @@ function commerce_fraud_default_rules_configuration() {
     ))
     ->action('commerce_order_update_status', array(
       'commerce_order:select' => 'commerce_order',
-      'order_status' => 'commerce_order_status_options_list',
+      'order_status' => 'fraudulent',
     ));
   $rules['commerce_fraud_update_order_status'] = $rule;
-  if (module_exists('simple_mail')) {
-    $rule = rules_reaction_rule();
-    $rule->label = t('Email black listed orders');
-    $rule->tags = array('Commerce Fraud');
-    $rule->active = FALSE;
-    $rule
-      ->event('commerce_checkout_complete')
-      ->condition('commerce_fraud_blacklisted', array(
-        'commerce_order:select' => 'commerce_order',
-        'commerce_fraud_level_function' => 'commerce_fraud_is_blacklisted',
-      ))
-      ->action('email', array(
-        'commerce_order:select' => 'commerce_order',
-      ));
-    $rules['commerce_fraud_email_blacklist'] = $rule;
-  }
 
   $rule = rules_reaction_rule();
   $rule->label = t('Increase fraud score if order has x amount of products.');
@@ -88,7 +72,6 @@ function commerce_fraud_default_rules_configuration() {
     ->event('commerce_checkout_complete')
     ->condition('commerce_fraud_has_po_box', array(
       'commerce_order:select' => 'commerce_order',
-      'commerce_fraud_po_box_function' => 'commerce_fraud_order_has_pobox',
     ))
     ->action('commerce_fraud_increase_fraud_count', array(
       'commerce_order:select' => 'commerce_order',
@@ -116,9 +99,28 @@ function commerce_fraud_default_rules_configuration() {
       'counter' => 5,
       'description' => t('Order is greater than $500.00'),
     ));
-  $rules['commerce_fraud_anonymous_user'] = $rule;
+  $rules['commerce_fraud_order_total'] = $rule;
+
+  $rule = rules_reaction_rule();
+  $rule->label = t('Increase fraud score for orders placed within x minutes');
+  $rule->tags = array('Commerce Fraud');
+  $rule->active = FALSE;
+  $rule
+    ->event('commerce_checkout_complete')
+    ->condition('commerce_fraud_last_order', array(
+      'commerce_order:select' => 'commerce-order',
+      'minutes' => '5',
+      'order_status' => array('completed'),
+    ))
+    ->action('commerce_fraud_increase_fraud_count', array(
+      'commerce_order:select' => 'commerce_order',
+      'counter' => 5,
+      'description' => t('Previous order completed within 5 minutes'),
+    ));
+  $rules['commerce_fraud_last_order'] = $rule;
+
   $rule = rules_reaction_rule();
-  $rule->label = t('Increase fraud score if user is anonymous');
+  $rule->label = t('Increase fraud score if order is placed by anonymous user');
   $rule->tags = array('Commerce Fraud');
   $rule->active = FALSE;
   $rule
@@ -129,25 +131,73 @@ function commerce_fraud_default_rules_configuration() {
     ->action('commerce_fraud_increase_fraud_count', array(
       'commerce_order:select' => 'commerce_order',
       'counter' => 5,
-      'description' => t('Order User anonymous'),
+      'description' => t('Order placed by anonymous user'),
     ));
   $rules['commerce_fraud_anonymous_user'] = $rule;
 
   $rule = rules_reaction_rule();
-  $rule->label = t('Increase fraud score for orders placed within x minutes');
+  $rule->label = t('Check Email with fraudulent order');
   $rule->tags = array('Commerce Fraud');
   $rule->active = FALSE;
   $rule
     ->event('commerce_checkout_complete')
-    ->condition('commerce_fraud_last_order', array(
+    ->condition('commerce_fraud_email', array(
       'commerce_order:select' => 'commerce-order',
     ))
     ->action('commerce_fraud_increase_fraud_count', array(
       'commerce_order:select' => 'commerce_order',
       'counter' => 5,
-      'description' => t('Previous order completed within 5 minutes'),
+      'description' => t('Email is same as one of fraudulent orders'),
     ));
-  $rules['commerce_fraud_last_order'] = $rule;
+  $rules['commerce_fraud_check_email'] = $rule;
+
+  $rule = rules_reaction_rule();
+  $rule->label = t('Check Uid with fraudulent order');
+  $rule->tags = array('Commerce Fraud');
+  $rule->active = FALSE;
+  $rule
+    ->event('commerce_checkout_complete')
+    ->condition('commerce_fraud_uid', array(
+      'commerce_order:select' => 'commerce-order',
+    ))
+    ->action('commerce_fraud_increase_fraud_count', array(
+      'commerce_order:select' => 'commerce_order',
+      'counter' => 5,
+      'description' => t('Uid is same as one of fraudulent orders'),
+    ));
+  $rules['commerce_fraud_check_uid'] = $rule;
+
+  $rule = rules_reaction_rule();
+  $rule->label = t('Check IP address with fraudulent order');
+  $rule->tags = array('Commerce Fraud');
+  $rule->active = FALSE;
+  $rule
+    ->event('commerce_checkout_complete')
+    ->condition('commerce_fraud_hostname', array(
+      'commerce_order:select' => 'commerce-order',
+    ))
+    ->action('commerce_fraud_increase_fraud_count', array(
+      'commerce_order:select' => 'commerce_order',
+      'counter' => 5,
+      'description' => t('IP address is same as one of fraudulent orders'),
+    ));
+  $rules['commerce_fraud_check_hostname'] = $rule;
+
+  $rule = rules_reaction_rule();
+  $rule->label = t('Increase fraud score if user has placed orders from different IP addresses');
+  $rule->tags = array('Commerce Fraud');
+  $rule->active = FALSE;
+  $rule
+    ->event('commerce_checkout_complete')
+    ->condition('commerce_fraud_ip', array(
+      'commerce_order:select' => 'commerce-order',
+    ))
+    ->action('commerce_fraud_increase_fraud_count', array(
+      'commerce_order:select' => 'commerce_order',
+      'counter' => 5,
+      'description' => t('User have placed orders from different IP address'),
+    ));
+  $rules['commerce_fraud_check_ip'] = $rule;
 
   return $rules;
 }
diff --git a/includes/commerce_fraud.admin.inc b/includes/commerce_fraud.admin.inc
index b1a5dac..b20c433 100644
--- a/includes/commerce_fraud.admin.inc
+++ b/includes/commerce_fraud.admin.inc
@@ -12,8 +12,13 @@ function commerce_fraud_admin_settings() {
   $form = array();
 
   /*=========Caps========*/
+  $form['commerce_fraud_caps'] = array(
+    '#type' => 'fieldset',
+    '#collapsible' => TRUE,
+    '#title' => t('Commerce Fraud Caps Settings'),
+  );
 
-  $form['commerce_fraud_greylist_cap'] = array(
+  $form['commerce_fraud_caps']['commerce_fraud_greylist_cap'] = array(
     '#type' => 'textfield',
     '#title' => t('Greylist cap'),
     '#description' => t('If an order has a fraud score greater than the number specified, it will be considered greylisted.'),
@@ -21,7 +26,7 @@ function commerce_fraud_admin_settings() {
     '#element_validate' => array('element_validate_integer'),
   );
 
-  $form['commerce_fraud_blacklist_cap'] = array(
+  $form['commerce_fraud_caps']['commerce_fraud_blacklist_cap'] = array(
     '#type' => 'textfield',
     '#title' => t('Blacklist cap'),
     '#description' => t('If an order has a fraud score greater than the number specified, it will be considered blacklisted.'),
@@ -29,7 +34,7 @@ function commerce_fraud_admin_settings() {
     '#element_validate' => array('element_validate_integer'),
   );
 
-  return system_settings_form($form);;
+  return system_settings_form($form);
 }
 
 /**
@@ -39,6 +44,6 @@ function commerce_fraud_admin_settings_validate($form, &$form_state) {
   $greyListValue = $form_state['values']['commerce_fraud_greylist_cap'];
   $blackListValue = $form_state['values']['commerce_fraud_blacklist_cap'];
   if ($greyListValue >= $blackListValue) {
-    form_set_error('commerce_fraud_greylist_cap', t('Grey List value cannot be equal to or more than Black List value'));
+    form_set_error('commerce_fraud_caps][commerce_fraud_greylist_cap', t('Grey List value cannot be equal to or more than Black List value'));
   }
 }
diff --git a/includes/views/commerce_fraud.views.inc b/includes/views/commerce_fraud.views.inc
index 0a28eb8..525ee56 100644
--- a/includes/views/commerce_fraud.views.inc
+++ b/includes/views/commerce_fraud.views.inc
@@ -19,7 +19,7 @@ function commerce_fraud_views_data() {
     'title' => t('Commerce Fraud Level'),
     'help' => t('Shows the fraud level.'),
     'field' => array(
-      'handler' => 'CommerceFraudViewsHandlerLevel',
+      'handler' => 'views_handler_commerce_fraud_level',
     ),
   );
 
@@ -27,7 +27,7 @@ function commerce_fraud_views_data() {
     'title' => t('Commerce Fraud Points'),
     'help' => t('Shows breakdown of points accumulated on the order.'),
     'field' => array(
-      'handler' => 'CommerceFraudViewsHandlerPoints',
+      'handler' => 'views_handler_commerce_fraud_points',
     ),
   );
 
diff --git a/includes/views/views_handler_commerce_fraud_level.inc b/includes/views/views_handler_commerce_fraud_level.inc
index 9c60f7e..bc78586 100644
--- a/includes/views/views_handler_commerce_fraud_level.inc
+++ b/includes/views/views_handler_commerce_fraud_level.inc
@@ -10,7 +10,7 @@
  *
  * @group views_field_handlers
  */
-class CommerceFraudViewsHandlerLevel extends views_handler_field {
+class views_handler_commerce_fraud_level extends views_handler_field {
 
   /**
    * {@inheritdoc}
diff --git a/includes/views/views_handler_commerce_fraud_points.inc b/includes/views/views_handler_commerce_fraud_points.inc
index 668e71f..fdcc9da 100644
--- a/includes/views/views_handler_commerce_fraud_points.inc
+++ b/includes/views/views_handler_commerce_fraud_points.inc
@@ -10,7 +10,7 @@
  *
  * @group views_field_handlers
  */
-class CommerceFraudViewsHandlerPoints extends views_handler_field {
+class views_handler_commerce_fraud_points extends views_handler_field {
 
   /**
    * {@inheritdoc}
@@ -25,5 +25,4 @@ class CommerceFraudViewsHandlerPoints extends views_handler_field {
     require_once drupal_get_path('module', 'commerce_fraud') . '/commerce_fraud.rules.inc';
     return commerce_fraud_get_fraud_notes_for_order($values->order_id);
   }
-
 }
diff --git a/templates/commerce-fraud--order-backoffice.tpl.php b/templates/commerce-fraud--order-backoffice.tpl.php
index 53a5cf4..fe02e60 100644
--- a/templates/commerce-fraud--order-backoffice.tpl.php
+++ b/templates/commerce-fraud--order-backoffice.tpl.php
@@ -1,10 +1,3 @@
-<?php
-
-/**
- * @file
- * Template.
- */
-?>
 <div class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>
   <div class="content"<?php print $content_attributes; ?>>
     <div class="content-left">
diff --git a/tests/commerce_fraud.test b/tests/commerce_fraud.test
index 12e4e15..47d1234 100644
--- a/tests/commerce_fraud.test
+++ b/tests/commerce_fraud.test
@@ -8,36 +8,42 @@
 /**
  * Test fraud rules.
  */
-class CommerceFraudRulesTest extends CommerceBaseTestCase {
-
-  protected $randomName;
+class CommerceFraudTest extends CommerceBaseTestCase {
 
   /**
    * Implementation of getInfo().
    */
   public static function getInfo() {
     return array(
-      'name' => 'Fraud Rules',
-      'description' => 'Test the rules provided by the Commerce Fraud module.',
-      'group' => 'Drupal Commerce',
+      'name' => 'Commerce Fraud',
+      'description' => 'Test Commerce Fraud module features like adding fraud score, fraud notes, resetting fraud count.',
+      'group' => 'Commerce Fraud',
     );
   }
 
   /**
-   * Set a random name.
-   *
-   * @param string $randomName
-   *   Assigns the random name.
+   * Setup the testing.
    */
-  public function setRandomName($randomName) {
-    $this->randomName = $randomName;
-  }
+  protected function setUp() {
+    $modules = $this->setUpHelper('all', array('commerce_fraud'));
+    parent::setUp($modules);
 
-  /**
-   * Get the random name.
-   */
-  public function getRandomName() {
-    return $this->randomName;
+    // User creation for different operations.
+    $this->store_customer = $this->createStoreCustomer();
+
+    // The rule that sends a mail after checkout completion should be disabled
+    // as it returns an error caused by how mail messages are stored.
+    $rules_config = rules_config_load('commerce_checkout_order_email');
+    $rules_config->active = FALSE;
+    $rules_config->save();
+
+    // Enable `commerce_fraud_update_order_status` in order to test if orders
+    // that are above a certain threshold can be marked fraudulent.
+    $rules_config = rules_config_load('commerce_fraud_update_order_status');
+    $rules_config->active = TRUE;
+    $rules_config->save();
+
+    variable_set('site_default_country', 'US');
   }
 
   /**
@@ -48,7 +54,6 @@ class CommerceFraudRulesTest extends CommerceBaseTestCase {
 
     switch ($set) {
       case 'store admin':
-      case 'site admin':
         $permissions[] = 'administer frauds';
         break;
     }
@@ -56,51 +61,61 @@ class CommerceFraudRulesTest extends CommerceBaseTestCase {
     return $permissions;
   }
 
-  /**
-   * Setup the testing.
-   */
-  function setUp() {
-    $modules = parent::setUpHelper('all');
-    $modules[] = 'commerce_fraud';
-    parent::setUp($modules);
-
-    // User creation for different operations.
-    $this->site_admin = $this->createSiteAdmin();
-    $this->store_admin = $this->createStoreAdmin();
-    $this->store_customer = $this->createStoreCustomer();
-
-    // The rule that sends a mail after checkout completion should be disabled
-    // as it returns an error caused by how mail messages are stored.
-    $rules_config = rules_config_load('commerce_checkout_order_email');
-    $rules_config->active = FALSE;
-    $rules_config->save();
-
-    // Setup a default user name.
-    $this->setRandomName($this->randomName());
-    variable_set('site_default_country', 'US');
-  }
-
   /**
    * Tests general functions in commerce fraud.
    */
-  function testCommerceFraud() {
-    $this->drupalLogin($this->store_admin);
+  public function testCommerceFraud() {
+    $this->drupalLogin($this->store_customer);
     $this->createDummyProductDisplayContentType();
     $product4 = $this->createDummyProduct('PROD-04', 'Product Four', 100, 'USD');
     $new_order = $this->createDummyOrder(2, array($product4->product_id => 3), 'pending');
     commerce_fraud_write_record($new_order, 39, 'Description of rule');
+    commerce_checkout_complete($new_order);
     // Check Order Fraud Score.
-    $fraud_score1 = commerce_fraud_get_fraud_score_for_order_id($new_order->order_id);
-    // Two rules for quantity and price to be fired.
-    $this->assertEqual($fraud_score1, 39);
-    $string1 = commerce_fraud_get_fraud_notes_for_order($new_order->order_id);
-    $this->assertEqual($string1, t('<strong>Total Points: </strong>39<br>Description of rule: 39'));
+    $fraud_score = commerce_fraud_get_fraud_score_for_order_id($new_order->order_id);
+
+    $this->assertEqual($fraud_score, 39);
+    // Check Order status.
+    $status = $new_order->status;
+    $this->assertEqual($status, 'fraudulent');
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($new_order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>39<br>Description of rule: 39'));
     commerce_fraud_reset_fraud_count($new_order);
-    $fraud_score2 = commerce_fraud_get_fraud_score_for_order_id($new_order->order_id);
-    // Two rules for quantity and price to be fired.
-    $this->assertEqual($fraud_score2, 0);
-    $string2 = commerce_fraud_get_fraud_notes_for_order($new_order->order_id);
-    $this->assertEqual($string2, t('No potential fraudulent activity.'));
+    $fraud_score = commerce_fraud_get_fraud_score_for_order_id($new_order->order_id);
+
+    $this->assertEqual($fraud_score, 0);
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($new_order->order_id);
+    $this->assertEqual($fraud_notes, t('No potential fraudulent activity.'));
+  }
+
+  /**
+   * Tests Checks Po Box address using Regex.
+   */
+  public function testCommerceFraudPoBoxAddressRegex() {
+    $tests = array(
+      array('address' => 'PO Box 123', 'result' => TRUE),
+      array('address' => 'P.O. Box 123', 'result' => TRUE),
+      array('address' => 'PO 123', 'result' => TRUE),
+      array('address' => 'Post Office Box 123', 'result' => TRUE),
+      array('address' => 'P.O 123', 'result' => TRUE),
+      array('address' => 'Box 123', 'result' => TRUE),
+      array('address' => '#123', 'result' => FALSE),
+      array('address' => '123', 'result' => FALSE),
+      array('address' => 'POB 123', 'result' => TRUE),
+      array('address' => 'P.O.B 123', 'result' => TRUE),
+      array('address' => 'P.O.B. 123', 'result' => FALSE),
+      array('address' => 'Post 123', 'result' => TRUE),
+      array('address' => 'Post Box 123', 'result' => TRUE),
+      array('address' => '123 Box street', 'result' => FALSE),
+      array('address' => 'PB. 123', 'result' => TRUE),
+      array('address' => 'P O B 123', 'result' => TRUE),
+      array('address' => 'Post 123', 'result' => TRUE),
+      array('address' => 'Post 12b3', 'result' => FALSE),
+      array('address' => '123 Box street', 'result' => FALSE),
+    );
+    foreach ($tests as $test) {
+      $this->assertEqual($test['result'], commerce_fraud_contains_po_box($test['address']));
+    }
   }
 
 }
diff --git a/tests/commerce_fraud_rules.test b/tests/commerce_fraud_rules.test
new file mode 100644
index 0000000..72832ff
--- /dev/null
+++ b/tests/commerce_fraud_rules.test
@@ -0,0 +1,256 @@
+<?php
+
+/**
+ * @file
+ * Unit tests for Commerce Fraud rules.
+ */
+
+/**
+ * Test fraud rules.
+ */
+class CommerceFraudRulesTest extends CommerceBaseTestCase {
+
+  /**
+   * Order.
+   *
+   * @var order
+   */
+  public $order;
+
+  /**
+   * Product.
+   *
+   * @var product
+   */
+  public $product;
+
+  /**
+   * Rules.
+   *
+   * @var rules
+   */
+  public $rules;
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Commerce Fraud Rules',
+      'description' => 'Test the rules provided by the Commerce Fraud module.',
+      'group' => 'Commerce Fraud',
+    );
+  }
+
+  /**
+   * Setup the testing.
+   */
+  protected function setUp() {
+    $modules = $this->setUpHelper('all', array('commerce_fraud'));
+    parent::setUp($modules);
+
+    // User creation for different operations.
+    $this->store_customer = $this->createStoreCustomer();
+
+    // The rule that sends a mail after checkout completion should be disabled
+    // as it returns an error caused by how mail messages are stored.
+    $rules_config = rules_config_load('commerce_checkout_order_email');
+    $rules_config->active = FALSE;
+    $rules_config->save();
+
+    variable_set('site_default_country', 'US');
+
+    // Create order.
+    $this->createDummyProductDisplayContentType();
+    $this->product = $this->createDummyProduct('PROD-04', 'Product Four', 100, 'USD');
+    $this->order = $this->createDummyOrder(2, array($this->product->product_id => 3), 'pending');
+
+    // Rules.
+    $this->rules = commerce_fraud_default_rules_configuration();
+  }
+
+  /**
+   * Overrides CommerceBaseTestCase::permissionBuilder().
+   */
+  protected function permissionBuilder($set) {
+    $permissions = parent::permissionBuilder($set);
+
+    switch ($set) {
+      case 'store admin':
+        $permissions[] = 'administer frauds';
+        break;
+    }
+
+    return $permissions;
+  }
+
+  /**
+   * Tests Anonymous Rule in commerce fraud.
+   */
+  public function testCommerceFraudAnonymousRule() {
+    $this->drupalLogin($this->store_customer);
+    $this->rules['commerce_fraud_anonymous_user']->active = TRUE;
+    $this->rules['commerce_fraud_anonymous_user']->save();
+
+    global $user;
+    $user = user_load(0);
+
+    // To test the Anonymous Rule.
+    $this->order->uid = $user->uid;
+
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Order placed by anonymous user: 5'));
+  }
+
+  /**
+   * Tests Quantity Rule in commerce fraud.
+   */
+  public function testCommerceFraudQuantityRule() {
+    $this->drupalLogin($this->store_customer);
+    $this->order = $this->createDummyOrder(3, array($this->product->product_id => 11), 'pending');
+    $this->rules['commerce_fraud_item_quantity']->active = TRUE;
+    $this->rules['commerce_fraud_item_quantity']->save();
+
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Order has more than 10 products: 5'));
+  }
+
+  /**
+   * Tests Last Order Rule in commerce fraud.
+   */
+  public function testCommerceFraudLastOrderRule() {
+    $this->drupalLogin($this->store_customer);
+    $old_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'completed');
+    $this->rules['commerce_fraud_last_order']->active = TRUE;
+    $this->rules['commerce_fraud_last_order']->save();
+
+    $date = new DateTimeImmutable();
+    $date = $date->modify('- 3 minutes');
+    $old_order->created = $date->getTimestamp();
+
+    $new_user = user_load(1);
+
+    $this->order->uid = $new_user->uid;
+    $old_order->uid = $new_user->uid;
+
+    commerce_order_save($old_order);
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Previous order completed within 5 minutes: 5'));
+  }
+
+  /**
+   * Tests Check Fraudulent Email Rule in commerce fraud.
+   */
+  public function testCommerceFraudCheckEmailRule() {
+    $this->drupalLogin($this->store_customer);
+    $new_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'fraudulent');
+    $this->rules['commerce_fraud_check_email']->active = TRUE;
+    $this->rules['commerce_fraud_check_email']->save();
+
+    $mail = $this->generateEmail();
+    $new_order->mail = $mail;
+    $this->order->mail = $mail;
+
+    commerce_order_save($new_order);
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Email is same as one of fraudulent orders: 5'));
+  }
+
+  /**
+   * Tests Check Fraudulent Uid Rule in commerce fraud.
+   */
+  public function testCommerceFraudCheckUidRule() {
+    $this->drupalLogin($this->store_customer);
+    $new_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'fraudulent');
+    $this->rules['commerce_fraud_check_uid']->active = TRUE;
+    $this->rules['commerce_fraud_check_uid']->save();
+
+    $user = user_load(1);
+    $new_order->uid = $user->uid;
+    $this->order->uid = $user->uid;
+
+    commerce_order_save($new_order);
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Uid is same as one of fraudulent orders: 5'));
+  }
+
+  /**
+   * Tests Check Fraudulent Hostanme in commerce fraud.
+   */
+  public function testCommerceFraudCheckHostnameRule() {
+    $this->drupalLogin($this->store_customer);
+    $new_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'fraudulent');
+    $this->rules['commerce_fraud_check_hostname']->active = TRUE;
+    $this->rules['commerce_fraud_check_hostname']->save();
+
+    $hostname = $this->randomName(10);
+    $new_order->hostname = $hostname;
+    $this->order->hostname = $hostname;
+
+    commerce_order_save($new_order);
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>IP address is same as one of fraudulent orders: 5'));
+  }
+
+  /**
+   * Tests Checks IP rule in commerce fraud.
+   */
+  public function testCommerceFraudCheckIpRule() {
+    $this->drupalLogin($this->store_customer);
+    $new_order = $this->createDummyOrder(3, array($this->product->product_id => 2), 'fraudulent');
+    $this->rules['commerce_fraud_check_ip']->active = TRUE;
+    $this->rules['commerce_fraud_check_ip']->save();
+
+    $user = user_load(2);
+
+    $new_order->hostname = $this->randomName(10);
+    $this->order->hostname = $this->randomName(10);
+
+    $new_order->uid = $user->uid;
+    $this->order->uid = $user->uid;
+
+    commerce_order_save($new_order);
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>User have placed orders from different IP address: 5'));
+  }
+
+  /**
+   * Tests Po Box rule in commerce fraud.
+   */
+  public function testCommerceFraudPoRule() {
+    $this->drupalLogin($this->store_customer);
+
+    $this->rules['commerce_fraud_has_po_box']->active = TRUE;
+    $this->rules['commerce_fraud_has_po_box']->save();
+
+    // Create new Shipping profile.
+    $profileShip = commerce_customer_profile_new('shipping');
+    // This is to test PO BOX Rule.
+    $profileShip->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] = 'Check for po box 123 in shipping address';
+    // Saving new profile.
+    commerce_customer_profile_save($profileShip);
+
+    // Adding Shipping Profile.
+    $this->order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'] = $profileShip->profile_id;
+
+    commerce_checkout_complete($this->order);
+
+    $fraud_notes = commerce_fraud_get_fraud_notes_for_order($this->order->order_id);
+    $this->assertEqual($fraud_notes, t('<strong>Total Points: </strong>5<br>Shipping Address has po box: 5'));
+  }
+
+}
diff --git a/tests/commerce_fraud_ui.test b/tests/commerce_fraud_ui.test
deleted file mode 100644
index 74dec53..0000000
--- a/tests/commerce_fraud_ui.test
+++ /dev/null
@@ -1,101 +0,0 @@
-<?php
-
-/**
- * @file
- * Commerce customer profile tests.
- */
-
-/**
- * Functional tests for the commerce fraud UI module.
- */
-class CommerceFraudUITest extends CommerceBaseTestCase {
-
-  /**
-   * Implementation of getInfo().
-   */
-  public static function getInfo() {
-    return array(
-      'name' => 'Fraud UI Rules',
-      'description' => 'Test the rules provided by the Commerce Fraud module.',
-      'group' => 'Drupal Commerce',
-    );
-  }
-
-  /**
-   * Set a random name.
-   *
-   * @param string $randomName
-   *   Assigns the random name.
-   */
-  public function setRandomName($randomName) {
-    $this->randomName = $randomName;
-  }
-
-  /**
-   * Get the random name.
-   */
-  public function getRandomName() {
-    return $this->randomName;
-  }
-
-  /**
-   * Overrides CommerceBaseTestCase::permissionBuilder().
-   */
-  protected function permissionBuilder($set) {
-    $permissions = parent::permissionBuilder($set);
-
-    switch ($set) {
-      case 'store admin':
-      case 'site admin':
-        $permissions[] = 'administer frauds';
-        break;
-    }
-
-    return $permissions;
-  }
-
-  /**
-   * Setup the testing.
-   */
-  function setUp() {
-    $modules = parent::setUpHelper('all');
-    $modules[] = 'commerce_fraud';
-    parent::setUp($modules);
-
-    // User creation for different operations.
-    $this->site_admin = $this->createSiteAdmin();
-    $this->store_admin = $this->createStoreAdmin();
-    $this->store_customer = $this->createStoreCustomer();
-
-    // The rule that sends a mail after checkout completion should be disabled
-    // as it returns an error caused by how mail messages are stored.
-    $rules_config = rules_config_load('commerce_checkout_order_email');
-    $rules_config->active = FALSE;
-    $rules_config->save();
-
-    // Setup a default user name.
-    $this->setRandomName($this->randomName());
-    variable_set('site_default_country', 'US');
-  }
-
-  /**
-   * Test function to test ui for commerce fraud module.
-   */
-  function testCommerceFraudUi() {
-    // Log in as store admin.
-    $this->drupalLogin($this->store_admin);
-
-    // Navigate to the fraud admin page.
-    $this->drupalGet('admin/commerce/config/fraud');
-    $this->assertResponse(200, t('Site admin user can configure the 
-      fraud settings'));
-    $this->assertFieldById('edit-commerce-fraud-greylist-cap', 10, t('GreyList display title field is present'));
-    $this->assertFieldById('edit-commerce-fraud-blacklist-cap', 20, t('BlackList display title field is present'));
-    $edit = array(
-      'commerce_fraud_greylist_cap' => t('20'),
-      'commerce_fraud_blacklist_cap' => t('30'),
-    );
-    $this->drupalPost(NULL, $edit, t('Save configuration'));
-  }
-
-}
